// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MessageDigested extends ethereum.Event {
  get params(): MessageDigested__Params {
    return new MessageDigested__Params(this);
  }
}

export class MessageDigested__Params {
  _event: MessageDigested;

  constructor(event: MessageDigested) {
    this._event = event;
  }

  get data(): MessageDigestedDataStruct {
    return changetype<MessageDigestedDataStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }
}

export class MessageDigestedDataStruct extends ethereum.Tuple {
  get isrc(): string {
    return this[0].toString();
  }

  get releaseId(): string {
    return this[1].toString();
  }
}

export class NewBlobSubmitted extends ethereum.Event {
  get params(): NewBlobSubmitted__Params {
    return new NewBlobSubmitted__Params(this);
  }
}

export class NewBlobSubmitted__Params {
  _event: NewBlobSubmitted;

  constructor(event: NewBlobSubmitted) {
    this._event = event;
  }

  get commitment(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class WhitelistChanged extends ethereum.Event {
  get params(): WhitelistChanged__Params {
    return new WhitelistChanged__Params(this);
  }
}

export class WhitelistChanged__Params {
  _event: WhitelistChanged;

  constructor(event: WhitelistChanged) {
    this._event = event;
  }

  get _whitelistId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _previousAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _newAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DdexSequencer__blobsResult {
  value0: Bytes;
  value1: boolean;
  value2: Address;

  constructor(value0: Bytes, value1: boolean, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getNextBlob(): Bytes {
    return this.value0;
  }

  getSubmitted(): boolean {
    return this.value1;
  }

  getProposer(): Address {
    return this.value2;
  }
}

export class DdexSequencer extends ethereum.SmartContract {
  static bind(address: Address): DdexSequencer {
    return new DdexSequencer("DdexSequencer", address);
  }

  DATA_PROVIDERS_WHITELIST(): Bytes {
    let result = super.call(
      "DATA_PROVIDERS_WHITELIST",
      "DATA_PROVIDERS_WHITELIST():(bytes1)",
      [],
    );

    return result[0].toBytes();
  }

  try_DATA_PROVIDERS_WHITELIST(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DATA_PROVIDERS_WHITELIST",
      "DATA_PROVIDERS_WHITELIST():(bytes1)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VALIDATORS_WHITELIST(): Bytes {
    let result = super.call(
      "VALIDATORS_WHITELIST",
      "VALIDATORS_WHITELIST():(bytes1)",
      [],
    );

    return result[0].toBytes();
  }

  try_VALIDATORS_WHITELIST(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "VALIDATORS_WHITELIST",
      "VALIDATORS_WHITELIST():(bytes1)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  blobQueueHead(): Bytes {
    let result = super.call("blobQueueHead", "blobQueueHead():(bytes32)", []);

    return result[0].toBytes();
  }

  try_blobQueueHead(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "blobQueueHead",
      "blobQueueHead():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  blobQueueTail(): Bytes {
    let result = super.call("blobQueueTail", "blobQueueTail():(bytes32)", []);

    return result[0].toBytes();
  }

  try_blobQueueTail(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "blobQueueTail",
      "blobQueueTail():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  blobs(param0: Bytes): DdexSequencer__blobsResult {
    let result = super.call("blobs", "blobs(bytes32):(bytes32,bool,address)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return new DdexSequencer__blobsResult(
      result[0].toBytes(),
      result[1].toBoolean(),
      result[2].toAddress(),
    );
  }

  try_blobs(param0: Bytes): ethereum.CallResult<DdexSequencer__blobsResult> {
    let result = super.tryCall(
      "blobs",
      "blobs(bytes32):(bytes32,bool,address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DdexSequencer__blobsResult(
        value[0].toBytes(),
        value[1].toBoolean(),
        value[2].toAddress(),
      ),
    );
  }

  whitelists(param0: Bytes): Address {
    let result = super.call("whitelists", "whitelists(bytes1):(address)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toAddress();
  }

  try_whitelists(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("whitelists", "whitelists(bytes1):(address)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get dataProvidersWhitelist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get validatorsWhitelist(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stakeVaultAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SubmitNewBlobCall extends ethereum.Call {
  get inputs(): SubmitNewBlobCall__Inputs {
    return new SubmitNewBlobCall__Inputs(this);
  }

  get outputs(): SubmitNewBlobCall__Outputs {
    return new SubmitNewBlobCall__Outputs(this);
  }
}

export class SubmitNewBlobCall__Inputs {
  _call: SubmitNewBlobCall;

  constructor(call: SubmitNewBlobCall) {
    this._call = call;
  }

  get commitment(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SubmitNewBlobCall__Outputs {
  _call: SubmitNewBlobCall;

  constructor(call: SubmitNewBlobCall) {
    this._call = call;
  }
}

export class SubmitProofForFraudulentBlobCall extends ethereum.Call {
  get inputs(): SubmitProofForFraudulentBlobCall__Inputs {
    return new SubmitProofForFraudulentBlobCall__Inputs(this);
  }

  get outputs(): SubmitProofForFraudulentBlobCall__Outputs {
    return new SubmitProofForFraudulentBlobCall__Outputs(this);
  }
}

export class SubmitProofForFraudulentBlobCall__Inputs {
  _call: SubmitProofForFraudulentBlobCall;

  constructor(call: SubmitProofForFraudulentBlobCall) {
    this._call = call;
  }

  get proof(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SubmitProofForFraudulentBlobCall__Outputs {
  _call: SubmitProofForFraudulentBlobCall;

  constructor(call: SubmitProofForFraudulentBlobCall) {
    this._call = call;
  }
}

export class SubmitProofOfProcessingCall extends ethereum.Call {
  get inputs(): SubmitProofOfProcessingCall__Inputs {
    return new SubmitProofOfProcessingCall__Inputs(this);
  }

  get outputs(): SubmitProofOfProcessingCall__Outputs {
    return new SubmitProofOfProcessingCall__Outputs(this);
  }
}

export class SubmitProofOfProcessingCall__Inputs {
  _call: SubmitProofOfProcessingCall;

  constructor(call: SubmitProofOfProcessingCall) {
    this._call = call;
  }

  get proof(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get messagesData(): Array<SubmitProofOfProcessingCallMessagesDataStruct> {
    return this._call.inputValues[1].value.toTupleArray<SubmitProofOfProcessingCallMessagesDataStruct>();
  }
}

export class SubmitProofOfProcessingCall__Outputs {
  _call: SubmitProofOfProcessingCall;

  constructor(call: SubmitProofOfProcessingCall) {
    this._call = call;
  }
}

export class SubmitProofOfProcessingCallMessagesDataStruct extends ethereum.Tuple {
  get isrc(): string {
    return this[0].toString();
  }

  get releaseId(): string {
    return this[1].toString();
  }
}
