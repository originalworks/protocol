// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class DdexMessage extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DdexMessage entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DdexMessage must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DdexMessage", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DdexMessage | null {
    return changetype<DdexMessage | null>(
      store.get_in_block("DdexMessage", id),
    );
  }

  static load(id: string): DdexMessage | null {
    return changetype<DdexMessage | null>(store.get("DdexMessage", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isrc(): string {
    let value = this.get("isrc");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set isrc(value: string) {
    this.set("isrc", Value.fromString(value));
  }

  get releaseId(): string {
    let value = this.get("releaseId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set releaseId(value: string) {
    this.set("releaseId", Value.fromString(value));
  }
}

export class Release extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Release entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Release must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Release", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Release | null {
    return changetype<Release | null>(store.get_in_block("Release", id));
  }

  static load(id: string): Release | null {
    return changetype<Release | null>(store.get("Release", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isrcs(): Array<string> {
    let value = this.get("isrcs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set isrcs(value: Array<string>) {
    this.set("isrcs", Value.fromStringArray(value));
  }
}

export class Isrc extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Isrc entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Isrc must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Isrc", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Isrc | null {
    return changetype<Isrc | null>(store.get_in_block("Isrc", id));
  }

  static load(id: string): Isrc | null {
    return changetype<Isrc | null>(store.get("Isrc", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }
}
